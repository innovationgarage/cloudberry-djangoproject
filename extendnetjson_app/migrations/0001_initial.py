# Generated by Django 2.0.3 on 2018-03-15 09:34

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_netjsonconfig.base.template
import django_netjsonconfig.utils
import jsonfield.fields
import model_utils.fields
import re
import sortedm2m.fields
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('django_x509', '0007_remove_ca_group'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Config',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('backend', models.CharField(choices=[('netjsonconfig.OpenWrt', 'OpenWRT/LEDE'), ('netjsonconfig.OpenWisp', 'OpenWISP Firmware 1.x')], help_text='Select <a href="http://netjsonconfig.openwisp.org/en/stable/" target="_blank">netjsonconfig</a> backend', max_length=128, verbose_name='backend')),
                ('config', jsonfield.fields.JSONField(blank=True, default=dict, help_text='configuration in NetJSON DeviceConfiguration format', verbose_name='configuration')),
                ('status', model_utils.fields.StatusField(choices=[('modified', 'modified'), ('running', 'running'), ('error', 'error')], default='modified', help_text='modified means the configuration is not applied yet; running means applied and running; error means the configuration caused issues and it was rolledback', max_length=100, no_check_for_status=True)),
                ('last_ip', models.GenericIPAddressField(blank=True, help_text='indicates the last ip from which the configuration was downloaded from (except downloads from this page)', null=True)),
            ],
            options={
                'verbose_name_plural': 'configurations',
                'abstract': False,
                'verbose_name': 'configuration',
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(db_index=True, max_length=64, unique=True)),
                ('mac_address', models.CharField(db_index=True, help_text='primary mac address', max_length=17, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'), code='invalid', message='Must be a valid mac address.')])),
                ('key', models.CharField(db_index=True, default=django_netjsonconfig.utils.get_random_key, help_text='unique device key', max_length=64, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[^\\s/\\.]+$'), code='invalid', message='Key must not contain spaces, dots or slashes.')])),
                ('model', models.CharField(blank=True, db_index=True, help_text='device model and manufacturer', max_length=64)),
                ('os', models.CharField(blank=True, db_index=True, help_text='operating system identifier', max_length=128, verbose_name='operating system')),
                ('system', models.CharField(blank=True, db_index=True, help_text='system on chip or CPU info', max_length=128, verbose_name='SOC / CPU')),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaggedTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField(db_index=True, verbose_name='Object id')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='extendnetjson_app_taggedtemplate_tagged_items', to='contenttypes.ContentType', verbose_name='Content type')),
            ],
            options={
                'verbose_name_plural': 'Tags',
                'abstract': False,
                'verbose_name': 'Tagged item',
            },
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(db_index=True, max_length=64, unique=True)),
                ('backend', models.CharField(choices=[('netjsonconfig.OpenWrt', 'OpenWRT/LEDE'), ('netjsonconfig.OpenWisp', 'OpenWISP Firmware 1.x')], help_text='Select <a href="http://netjsonconfig.openwisp.org/en/stable/" target="_blank">netjsonconfig</a> backend', max_length=128, verbose_name='backend')),
                ('config', jsonfield.fields.JSONField(blank=True, default=dict, help_text='configuration in NetJSON DeviceConfiguration format', verbose_name='configuration')),
                ('type', models.CharField(choices=[('generic', 'Generic'), ('vpn', 'VPN-client')], db_index=True, default='generic', help_text='template type, determines which features are available', max_length=16, verbose_name='type')),
                ('default', models.BooleanField(db_index=True, default=False, help_text='whether new configurations will have this template enabled by default', verbose_name='enabled by default')),
                ('auto_cert', models.BooleanField(db_index=True, default=django_netjsonconfig.base.template.default_auto_cert, help_text='whether x509 client certificates should be automatically managed behind the scenes for each configuration using this template, valid only for the VPN type', verbose_name='auto certificate')),
            ],
            options={
                'verbose_name_plural': 'templates',
                'abstract': False,
                'verbose_name': 'template',
            },
        ),
        migrations.CreateModel(
            name='TemplateTag',
            fields=[
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Slug')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name_plural': 'Tags',
                'abstract': False,
                'verbose_name': 'Tag',
            },
        ),
        migrations.CreateModel(
            name='Vpn',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(db_index=True, max_length=64, unique=True)),
                ('config', jsonfield.fields.JSONField(default=dict, help_text='configuration in NetJSON DeviceConfiguration format', verbose_name='configuration')),
                ('host', models.CharField(help_text='VPN server hostname or ip address', max_length=64)),
                ('backend', models.CharField(choices=[('django_netjsonconfig.vpn_backends.OpenVpn', 'OpenVPN')], help_text='Select VPN configuration backend', max_length=128, verbose_name='VPN backend')),
                ('notes', models.TextField(blank=True)),
                ('dh', models.TextField(blank=True)),
                ('ca', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_x509.Ca', verbose_name='CA')),
                ('cert', models.ForeignKey(blank=True, help_text='leave blank to create automatically', null=True, on_delete=django.db.models.deletion.CASCADE, to='django_x509.Cert', verbose_name='x509 Certificate')),
            ],
            options={
                'verbose_name_plural': 'VPN servers',
                'abstract': False,
                'verbose_name': 'VPN server',
            },
        ),
        migrations.CreateModel(
            name='VpnClient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auto_cert', models.BooleanField(default=False)),
                ('cert', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_x509.Cert')),
                ('config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='extendnetjson_app.Config')),
                ('vpn', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='extendnetjson_app.Vpn')),
            ],
            options={
                'verbose_name_plural': 'VPN clients',
                'abstract': False,
                'verbose_name': 'VPN client',
            },
        ),
        migrations.AddField(
            model_name='template',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of template tags, may be used to ease auto configuration with specific settings (eg: 4G, mesh, WDS, VPN, ecc.)', through='extendnetjson_app.TaggedTemplate', to='extendnetjson_app.TemplateTag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='template',
            name='vpn',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='extendnetjson_app.Vpn', verbose_name='VPN'),
        ),
        migrations.AddField(
            model_name='taggedtemplate',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='extendnetjson_app_taggedtemplate_items', to='extendnetjson_app.TemplateTag'),
        ),
        migrations.AddField(
            model_name='config',
            name='device',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='extendnetjson_app.Device'),
        ),
        migrations.AddField(
            model_name='config',
            name='templates',
            field=sortedm2m.fields.SortedManyToManyField(blank=True, help_text='configuration templates, applied from first to last', related_name='config_relations', to='extendnetjson_app.Template', verbose_name='templates'),
        ),
        migrations.AddField(
            model_name='config',
            name='vpn',
            field=models.ManyToManyField(blank=True, related_name='vpn_relations', through='extendnetjson_app.VpnClient', to='extendnetjson_app.Vpn'),
        ),
        migrations.AlterUniqueTogether(
            name='vpnclient',
            unique_together={('config', 'vpn')},
        ),
    ]
